const raw_increment = proc(value: ^int) {
    value^ = value^ + 1
}

const return_increment = proc(value: ^const int) -> int {
    return value^ + 1
}

const double_indirection = proc(value: ^const ^int) -> int {
    value^^ = value^^ * value^^
    return value^^
}

const main = proc() -> int {
    var a = 1
    let ap = @a
    let b = return_increment(@a) // Automatically cast pointer to mutable to pointer to const
    raw_increment(@a)
    let c = double_indirection(@ap)
    return a
}

/*
>>>ir
procedure None @1_raw_increment(ptr %value) {
    %5_value = alloc 8 align 8
    store ptr %value into %5_value
    %6 = load ptr %5_value
    %7 = load i32 %6
    %8 = add i32 %7, 1
    %9 = load ptr %5_value
    store i32 %8 into %9
}

procedure i32 @2_return_increment(ptr %value) {
    %10_value = alloc 8 align 8
    store ptr %value into %10_value
    %11 = load ptr %10_value
    %12 = load i32 %11
    %13 = add i32 %12, 1
    return %13
}

procedure i32 @3_double_indirection(ptr %value) {
    %14_value = alloc 8 align 8
    store ptr %value into %14_value
    %15 = load ptr %14_value
    %16 = load ptr %15
    %17 = load i32 %16
    %18 = load ptr %14_value
    %19 = load ptr %18
    %20 = load i32 %19
    %21 = mul i32 %17, %20
    %22 = load ptr %14_value
    %23 = load ptr %22
    store i32 %21 into %23
    %24 = load ptr %14_value
    %25 = load ptr %24
    %26 = load i32 %25
    return %26
}

procedure i32 @main() {
    %27_a = alloc 4 align 4
    %28_ap = alloc 8 align 8
    %29_b = alloc 4 align 4
    %30_c = alloc 4 align 4
    store i32 1 into %27_a
    store ptr %27_a into %28_ap
    %31 = call i32 @2_return_increment(ptr %27_a)
    store i32 %31 into %29_b
    call @1_raw_increment(ptr %27_a)
    %32 = call i32 @3_double_indirection(ptr %28_ap)
    store i32 %32 into %30_c
    %33 = load i32 %27_a
    return %33
}

ir<<<

>>>stdout
stdout<<<

>>>stderr
stderr<<<

[Return Value] 4
*/