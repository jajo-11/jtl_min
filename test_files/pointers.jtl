const raw_increment = proc(value: ^int) {
    value^ = value^ + 1
}

const return_increment = proc(value: ^const int) -> int {
    return value^ + 1
}

const double_indirection = proc(value: ^const ^int) -> int {
    value^^ = value^^ * value^^
}

const main = proc() -> int {
    var a = 1
    let ap = @a
    let b = return_increment(@a) // Automatically cast pointer to mutable to pointer to const
    raw_increment(@a)
    let c = double_indirection(@ap)
    return a
}

/*
>>>
procedure proc1_raw_increment (<ptr>$proc1_raw_increment_arg_value) -> None:
proc1_raw_increment_body:
  load <ptr>$proc1_raw_increment_arg_value -> <ptr>%t2_value
  load <ptr>%t2_value -> <i32>%t3_value
  add <i32>%t3_value <i32>1 -> <i32>%t4_value
  load <ptr>$proc1_raw_increment_arg_value -> <i32>%t1_value
  store <i32>%t4_value -> <i32>%t1_value

procedure proc2_return_increment (<ptr>$proc2_return_increment_arg_value) -> i32:
proc2_return_increment_body:
  load <ptr>$proc2_return_increment_arg_value -> <ptr>%t5_value
  load <ptr>%t5_value -> <i32>%t6_return
  add <i32>%t6_return <i32>1 -> <i32>%t7_return
  return <i32>%t7_return

procedure proc3_double_indirection (<ptr>$proc3_double_indirection_arg_value) -> i32:
proc3_double_indirection_body:
  load <ptr>$proc3_double_indirection_arg_value -> <ptr>%t10_value
  load <ptr>%t10_value -> <ptr>%t11_value
  load <ptr>%t11_value -> <i32>%t12_value
  load <ptr>$proc3_double_indirection_arg_value -> <ptr>%t13_value
  load <ptr>%t13_value -> <ptr>%t14_value
  load <ptr>%t14_value -> <i32>%t15_value
  multiply <i32>%t12_value <i32>%t15_value -> <i32>%t16_value
  load <ptr>$proc3_double_indirection_arg_value -> <ptr>%t8_value
  load <ptr>%t8_value -> <i32>%t9_value
  store <i32>%t16_value -> <i32>%t9_value

procedure proc4_main () -> i32:
proc4_main_body:
  store <i32>1 -> <i32>$v1_a
  store <i32>$v1_a -> <i32>$v2_ap
  call proc2_return_increment (<i32>$v1_a) -> <i32>%t17_b
  store <i32>%t17_b -> <i32>$v3_b
  call proc1_raw_increment (<i32>$v1_a) -> None
  call proc3_double_indirection (<i32>$v2_ap) -> <i32>%t18_c
  store <i32>%t18_c -> <i32>$v4_c
  load <i32>$v1_a -> <i32>%t19_a
  return <i32>%t19_a


global_block:

main: Found
<<<
*/