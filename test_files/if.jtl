const main = proc() -> int {
    var sum = 1
    if sum <= 1 then {
        // print(sum)
        sum = (sum + 1) * sum
        {
            let a = 1 * 2
        }
    }

    let no = if sum > 0 and 1 == 1 then sum else -sum
    return no
}

/*
>>>ir
procedure i32 @main() {
    %2_sum = alloc 4 align 4
    %3_no = alloc 4 align 4
    %12_a = alloc 8 align 8
    store i32 1 into %2_sum
    %6 = load i32 %2_sum
    %7 = leq u32 %6, 1
    jump_if %7 is zero 5_if_end else 4_if_body
    4_if_body:
    %8 = load i32 %2_sum
    %9 = add i32 %8, 1
    %10 = load i32 %2_sum
    %11 = mul i32 %9, %10
    store i32 %11 into %2_sum
    %13 = mul i64 1, 2
    store i64 %13 into %12_a
    jump 5_if_end
    5_if_end:
    %17 = load i32 %2_sum
    %18 = greater u32 %17, 0
    19_and_left:
    jump_if %18 is zero 21_and else 20_and_right
    20_and_right:
    %22 = eq u32 1, 1
    jump 21_and
    21_and:
    %23 = PHI u32 (%18 from 19_and_left), (%22 from 20_and_right)
    jump_if %23 is zero 15_if_false else 14_if_true
    14_if_true:
    %24 = load i32 %2_sum
    jump 16_if_end
    15_if_false:
    %25 = load i32 %2_sum
    %26 = neg i32 %25
    jump 16_if_end
    16_if_end:
    %27 = PHI i32 (%24 from 14_if_true), (%26 from 15_if_false)
    store i32 %27 into %3_no
    %28 = load i32 %3_no
    return %28
}

ir<<<

>>>stdout
stdout<<<

>>>stderr
<<<stderr

[Return Value] 2
*/