const main = proc() -> int {
    const a: u32 = 2
    let a2 = a >> 1 // logical shift
    let a3 = a2 | a
    let a4 = a3 & 2
    let b: i32 = -1
    let b1 = b >> 1 // arithmetic shift
    let c = a4 xor transmute(u32, b1)
    return cast(i32, ~c)
}

/*
>>>
procedure i32 @main() {
    %2_a = alloc 4 align 4
    %3_a2 = alloc 4 align 4
    %4_a3 = alloc 4 align 4
    %5_a4 = alloc 4 align 4
    %6_b = alloc 4 align 4
    %7_b1 = alloc 4 align 4
    %8_c = alloc 4 align 4
    store u32 2 into %2_a
    %9 = load u32 %2_a
    %10 = lshr u32 %9, 1
    store u32 %10 into %3_a2
    %11 = load u32 %3_a2
    %12 = load u32 %2_a
    %13 = or_bitwise u32 %11, %12
    store u32 %13 into %4_a3
    %14 = load u32 %4_a3
    %15 = and_bitwise u32 %14, 2
    store u32 %15 into %5_a4
    %16 = neg i32 1
    store i32 %16 into %6_b
    %17 = load i32 %6_b
    %18 = ashr i32 %17, 1
    store i32 %18 into %7_b1
    %19 = load u32 %5_a4
    %20 = load i32 %7_b1
    %21 = copy u32 %20
    %22 = xor u32 %19, %21
    store u32 %22 into %8_c
    %23 = load u32 %8_c
    %24 = xor u32 %23, -1
    %25 = cast i32 %24
    return %25
}

<<<
*/