const main = proc() -> int {
    const a: u32 = 2
    let a2 = a >> 1 // arithmetic shift
    let a3 = a2 | a
    let a4 = a3 & 2
    let b: i32 = -1
    let b1 = b >> 1
    let c = a4 xor transmute(u32, b1)
    return cast(i32, ~c)
}

/*
>>>
procedure proc1_main () -> i32:
proc1_main_body:
  store <u32>2 -> <u32>$v1_a
  load <u32>$v1_a -> <u32>%t1_a
  shift_right_arithmetic <u32>%t1_a <i64>1 -> <u32>%t2_a2
  store <u32>%t2_a2 -> <u32>$v2_a2
  load <u32>$v2_a2 -> <u32>%t3_a2
  load <u32>$v1_a -> <u32>%t4_a
  or_bitwise <u32>%t3_a2 <u32>%t4_a -> <u32>%t5_a3
  store <u32>%t5_a3 -> <u32>$v3_a3
  load <u32>$v3_a3 -> <u32>%t6_a3
  and_bitwise <u32>%t6_a3 <u32>2 -> <u32>%t7_a4
  store <u32>%t7_a4 -> <u32>$v4_a4
  neg <i32>1 -> <i32>%t8_b
  store <i32>%t8_b -> <i32>$v5_b
  load <i32>$v5_b -> <i32>%t9_b
  shift_right_logical <i32>%t9_b <i64>1 -> <i32>%t10_b1
  store <i32>%t10_b1 -> <i32>$v6_b1
  load <u32>$v4_a4 -> <u32>%t11_a4
  load <i32>$v6_b1 -> <i32>%t12_b1
  move <i32>%t12_b1 -> <u32>%t13_c
  xor <u32>%t11_a4 <u32>%t13_c -> <u32>%t14_c
  store <u32>%t14_c -> <u32>$v7_c
  load <u32>$v7_c -> <u32>%t15_c
  not_bitwise <u32>%t15_c -> <u32>%t16_return
  cast <u32>%t16_return -> <i32>%t17_return
  return <i32>%t17_return


global_block:

main: Found
<<<
*/