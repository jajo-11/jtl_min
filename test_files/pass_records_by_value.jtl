const printf = external proc (fmt: ^char, varargs)

const Ragged = record {
    var x: i64
    var y: i32
}

const take_record_modify_and_return = proc (rec: Ragged, multiplier: i64) -> Ragged {
    var new_rec = rec
    new_rec.x = new_rec.x * multiplier
    new_rec.y = new_rec.y * cast(i32, multiplier)
    return new_rec
}

const main = proc () -> int {
    var original = Ragged(1997, 10)
    var new = take_record_modify_and_return(original, 2)
    printf(c"x - old: %d, new: %d\n", original.x, new.x)
    printf(c"y - old: %d, new: %d\n", original.y, new.y)
    return 0
}

/*
>>>ir
&1_Ragged = type i64, i32
procedure &1_Ragged @2_take_record_modify_and_return(&1_Ragged %rec, i64 %multiplier) {
    %4_rec = alloc 12 align 8
    %5_multiplier = alloc 8 align 8
    %6_new_rec = alloc 12 align 8
    memcpy 12 from %rec to %4_rec
    store i64 %multiplier into %5_multiplier
    memcpy 12 from %4_rec to %6_new_rec
    %7 = get_ptr %6_new_rec[0].0
    %8 = load i64 %7
    %9 = load i64 %5_multiplier
    %10 = mul i64 %8, %9
    %11 = get_ptr %6_new_rec[0].0
    store i64 %10 into %11
    %12 = get_ptr %6_new_rec[0].1
    %13 = load i32 %12
    %14 = load i64 %5_multiplier
    %15 = cast i32 %14
    %16 = mul i32 %13, %15
    %17 = get_ptr %6_new_rec[0].1
    store i32 %16 into %17
    return %6_new_rec
}

procedure i32 @main() {
    %18_original = alloc 12 align 8
    %19_new = alloc 12 align 8
    %20 = get_ptr %18_original[0].0
    store i64 1997 into %20
    %21 = get_ptr %18_original[0].1
    store i32 10 into %21
    %22 = call &1_Ragged @2_take_record_modify_and_return(&1_Ragged %18_original, i64 2)
    memcpy 12 from %22 to %19_new
    %24 = get_ptr %18_original[0].0
    %25 = load i64 %24
    %26 = get_ptr %19_new[0].0
    %27 = load i64 %26
    call @printf(ptr @23,  ...varargs, i64 %25, i64 %27)
    %29 = get_ptr %18_original[0].1
    %30 = load i32 %29
    %31 = get_ptr %19_new[0].1
    %32 = load i32 %31
    call @printf(ptr @28,  ...varargs, i32 %30, i32 %32)
    return 0
}

data @23 = "x - old: %d, new: %d\n"
data @28 = "y - old: %d, new: %d\n"
ir<<<

>>>stdout
x - old: 1997, new: 3994
y - old: 10, new: 20
stdout<<<

[Return Value] 0
*/